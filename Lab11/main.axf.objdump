
C:/Users/nusai/Desktop/Lab11/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:

.text
.globl _start
_start:

	ldr r0, =Array_C
   0:	e59f000c 	ldr	r0, [pc, #12]	; 14 <idle+0x4>
	ldr r1, =Array_A
   4:	e59f100c 	ldr	r1, [pc, #12]	; 18 <idle+0x8>
	ldr r2, =Array_B
   8:	e59f200c 	ldr	r2, [pc, #12]	; 1c <idle+0xc>

	bl mm
   c:	eb000003 	bl	20 <mm>

00000010 <idle>:

idle:
	b idle
  10:	eafffffe 	b	10 <idle>
  14:	00000160 	.word	0x00000160
  18:	000000d0 	.word	0x000000d0
  1c:	00000118 	.word	0x00000118

00000020 <mm>:
.global Array_A
.global Array_B
.global Array_C

mm:
    mov r7, #3
  20:	e3a07003 	mov	r7, #3
    mov r10, #256
  24:	e3a0ac01 	mov	r10, #256	; 0x100
    SUB  sp,sp, #24     //  make room on stack for 3 registers
  28:	e24dd018 	sub	sp, sp, #24
    STR  r4, [sp, #20]  //  save r4 on stack
  2c:	e58d4014 	str	r4, [sp, #20]
    STR  r5, [sp, #16]  //  save r5 on stack
  30:	e58d5010 	str	r5, [sp, #16]
    STR  r6,  [sp, #12] //  save r6 on stack
  34:	e58d600c 	str	r6, [sp, #12]
    str r7, [sp, #8]
  38:	e58d7008 	str	r7, [sp, #8]
    str r8, [sp, #4]
  3c:	e58d8004 	str	r8, [sp, #4]
    str r9, [sp, #0]
  40:	e58d9000 	str	r9, [sp]
    MOV   r3,  #0   //  i = 0// initialize 1st for loop
  44:	e3a03000 	mov	r3, #0

00000048 <L1>:
L1: 
    MOV   r4,  #0  //  j = 0// restart 2nd for loop
  48:	e3a04000 	mov	r4, #0

0000004c <L2>:
L2: 
    MOV   r5,  #0  //  k = 0// restart 3rd for loop
  4c:	e3a05000 	mov	r5, #0
    mul r9, r3, r7 //multiply i by row size (n)
  50:	e0090793 	mul	r9, r3, r7
    add r6, r4, r9 //add the product and j to get address of xij
  54:	e0846009 	add	r6, r4, r9
    add r6, r0, r6, LSL #3 //convert into bytes
  58:	e0806186 	add	r6, r0, r6, lsl #3
  5c:	ed964b00 	.word	0xed964b00

00000060 <L3>:
    .word 0b11101101100101100100101100000000 //0b = binary
    //FLDD d4, [xijAddr, #0] 
    //.word 0b11101101100010100100101100000000 //store what's in d4 in mem 0xFFF
L3:
    mul r9, r5, r7
  60:	e0090795 	mul	r9, r5, r7
    add r12, r4, r9
  64:	e084c009 	add	r12, r4, r9
    add r12, r2, r12, LSL#3
  68:	e082c18c 	add	r12, r2, r12, lsl #3
  6c:	ed9c2b00 	.word	0xed9c2b00
    .word 0b11101101100111000010101100000000
    //FLDD d2, [tempAddr, #0]
    mul r9, r3, r7
  70:	e0090793 	mul	r9, r3, r7
    add r12, r5, r9
  74:	e085c009 	add	r12, r5, r9
    add r12, r1, r12, LSL #3
  78:	e081c18c 	add	r12, r1, r12, lsl #3
  7c:	ed9c6b00 	.word	0xed9c6b00
  80:	ee262b02 	.word	0xee262b02
  84:	ee344b02 	.word	0xee344b02
    //FLDD d6, [tempAddr, #0]
    .word 0b11101110001001100010101100000010
    //FMULD d2, d6, d2
    .word 0b11101110001101000100101100000010
    //FADDD d4, d4, d2
    ADD r5, r5, #1
  88:	e2855001 	add	r5, r5, #1
    CMP r5, r7
  8c:	e1550007 	cmp	r5, r7
    blt L3
  90:	bafffff2 	blt	60 <L3>
  94:	ed864b00 	.word	0xed864b00
    .word 0b11101101100001100100101100000000
    //FSTD d4, [xijAddr, #0]
    add r4,r4, #1
  98:	e2844001 	add	r4, r4, #1
    cmp r4, r7
  9c:	e1540007 	cmp	r4, r7
    blt L2
  a0:	baffffe9 	blt	4c <L2>
    add r3,r3, #1
  a4:	e2833001 	add	r3, r3, #1
    cmp r3, r7
  a8:	e1530007 	cmp	r3, r7
    blt L1
  ac:	baffffe5 	blt	48 <L1>


     ldr  r4, [sp, #20]  //  save r4 on stack
  b0:	e59d4014 	ldr	r4, [sp, #20]
    ldr  r5, [sp, #16]  //  save r5 on stack
  b4:	e59d5010 	ldr	r5, [sp, #16]
    ldr  r6,  [sp, #12] //  save r6 on stack
  b8:	e59d600c 	ldr	r6, [sp, #12]
    ldr r7, [sp, #8]
  bc:	e59d7008 	ldr	r7, [sp, #8]
    ldr r8, [sp, #4]
  c0:	e59d8004 	ldr	r8, [sp, #4]
    ldr r9, [sp, #0]
  c4:	e59d9000 	ldr	r9, [sp]

    add sp, sp, #24
  c8:	e28dd018 	add	sp, sp, #24

    mov pc, lr 
  cc:	e1a0f00e 	mov	pc, lr

000000d0 <Array_A>:
  d0:	9374bc6a 	.word	0x9374bc6a
  d4:	3ff00418 	.word	0x3ff00418
  d8:	26e978d5 	.word	0x26e978d5
  dc:	3ff00831 	.word	0x3ff00831
  e0:	ba5e353f 	.word	0xba5e353f
  e4:	3ff00c49 	.word	0x3ff00c49
  e8:	49ba5e35 	.word	0x49ba5e35
  ec:	4000020c 	.word	0x4000020c
  f0:	9374bc6a 	.word	0x9374bc6a
  f4:	40000418 	.word	0x40000418
  f8:	dd2f1aa0 	.word	0xdd2f1aa0
  fc:	40000624 	.word	0x40000624
 100:	49ba5e35 	.word	0x49ba5e35
 104:	4008020c 	.word	0x4008020c
 108:	9374bc6a 	.word	0x9374bc6a
 10c:	40080418 	.word	0x40080418
 110:	dd2f1aa0 	.word	0xdd2f1aa0
 114:	40080624 	.word	0x40080624

00000118 <Array_B>:
 118:	00000000 	.word	0x00000000
 11c:	3ff00000 	.word	0x3ff00000
 120:	00000000 	.word	0x00000000
 124:	3ff00000 	.word	0x3ff00000
 128:	00000000 	.word	0x00000000
 12c:	3ff00000 	.word	0x3ff00000
 130:	00000000 	.word	0x00000000
 134:	40000000 	.word	0x40000000
 138:	00000000 	.word	0x00000000
 13c:	40000000 	.word	0x40000000
 140:	00000000 	.word	0x00000000
 144:	40000000 	.word	0x40000000
 148:	00000000 	.word	0x00000000
 14c:	40080000 	.word	0x40080000
 150:	00000000 	.word	0x00000000
 154:	40080000 	.word	0x40080000
 158:	00000000 	.word	0x00000000
 15c:	40080000 	.word	0x40080000

00000160 <Array_C>:
	...
