
C:/Users/User/Desktop/Lab10part2/config_GIC2.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000037 	b	e4 <_start>
   4:	ea000048 	b	12c <SERVICE_UND>
   8:	ea000048 	b	130 <SERVICE_SVC>
   c:	ea000049 	b	138 <SERVICE_ABT_INST>
  10:	ea000047 	b	134 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000047 	b	13c <SERVICE_IRQ>
  1c:	ea000054 	b	174 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <CONFIG_GIC>:
/* 
 * Configure the Generic Interrupt Controller (GIC)
*/
				.global	CONFIG_GIC
CONFIG_GIC:
				PUSH		{LR}
  40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    			/* To configure the FPGA KEYS interrupt (ID 73):
				 *	1. set the target to cpu0 in the ICDIPTRn register
				 *	2. enable the interrupt in the ICDISERn register */
				/* CONFIG_INTERRUPT (int_ID (R0), CPU_target (R1)); */
    			MOV		R0, #73					// KEY port (interrupt ID = 73)
  44:	e3a00049 	mov	r0, #73	; 0x49
    			MOV		R1, #1					// this field is a bit-mask; bit 0 targets cpu0
  48:	e3a01001 	mov	r1, #1
    			BL			CONFIG_INTERRUPT
  4c:	eb00000d 	bl	88 <CONFIG_INTERRUPT>

                MOV     R0, #80                 // KEY port (interrupt ID = 73)
  50:	e3a00050 	mov	r0, #80	; 0x50
                MOV     R1, #1                  // this field is a bit-mask; bit 0 targets cpu0
  54:	e3a01001 	mov	r1, #1
                BL          CONFIG_INTERRUPT
  58:	eb00000a 	bl	88 <CONFIG_INTERRUPT>

                MOV     R0, #29                 // KEY port (interrupt ID = 73)
  5c:	e3a0001d 	mov	r0, #29
                MOV     R1, #1                  // this field is a bit-mask; bit 0 targets cpu0
  60:	e3a01001 	mov	r1, #1
                BL          CONFIG_INTERRUPT
  64:	eb000007 	bl	88 <CONFIG_INTERRUPT>

				/* configure the GIC CPU interface */
    			LDR		R0, =MPCORE_GIC_CPUIF	// base address of CPU interface
  68:	e59f0060 	ldr	r0, [pc, #96]	; d0 <HPS_WATCHDOG1_IRQ+0x4>
    			/* Set Interrupt Priority Mask Register (ICCPMR) */
    			LDR		R1, =0xFFFF 			// enable interrupts of all priorities levels
  6c:	e59f1060 	ldr	r1, [pc, #96]	; d4 <HPS_WATCHDOG1_IRQ+0x8>
    			STR		R1, [R0, #ICCPMR]
  70:	e5801004 	str	r1, [r0, #4]
    			/* Set the enable bit in the CPU Interface Control Register (ICCICR). This bit
				 * allows interrupts to be forwarded to the CPU(s) */
    			MOV		R1, #1
  74:	e3a01001 	mov	r1, #1
    			STR		R1, [R0]
  78:	e5801000 	str	r1, [r0]
    
    			/* Set the enable bit in the Distributor Control Register (ICDDCR). This bit
				 * allows the distributor to forward interrupts to the CPU interface(s) */
    			LDR		R0, =MPCORE_GIC_DIST
  7c:	e59f0054 	ldr	r0, [pc, #84]	; d8 <HPS_WATCHDOG1_IRQ+0xc>
    			STR		R1, [R0]    
  80:	e5801000 	str	r1, [r0]
    
    			POP     	{PC}
  84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000088 <CONFIG_INTERRUPT>:
 * other registers in the GIC
 * Arguments: R0 = interrupt ID, N
 *            R1 = CPU target
*/
CONFIG_INTERRUPT:
    			PUSH		{R4-R5, LR}
  88:	e92d4030 	push	{r4, r5, lr}
    
    			/* Configure Interrupt Set-Enable Registers (ICDISERn). 
				 * reg_offset = (integer_div(N / 32) * 4
				 * value = 1 << (N mod 32) */
    			LSR		R4, R0, #3							// calculate reg_offset
  8c:	e1a041a0 	lsr	r4, r0, #3
    			BIC		R4, R4, #3							// R4 = reg_offset
  90:	e3c44003 	bic	r4, r4, #3
				LDR		R2, =MPCORE_GIC_DIST+ICDISER
  94:	e59f2040 	ldr	r2, [pc, #64]	; dc <HPS_WATCHDOG1_IRQ+0x10>
				ADD		R4, R2, R4							// R4 = address of ICDISER
  98:	e0824004 	add	r4, r2, r4
    
    			AND		R2, R0, #0x1F   					// N mod 32
  9c:	e200201f 	and	r2, r0, #31
				MOV		R5, #1								// enable
  a0:	e3a05001 	mov	r5, #1
    			LSL		R2, R5, R2							// R2 = value
  a4:	e1a02215 	lsl	r2, r5, r2

				/* now that we have the register address (R4) and value (R2), we need to set the
				 * correct bit in the GIC register */
    			LDR		R3, [R4]								// read current register value
  a8:	e5943000 	ldr	r3, [r4]
    			ORR		R3, R3, R2							// set the enable bit
  ac:	e1833002 	orr	r3, r3, r2
    			STR		R3, [R4]								// store the new register value
  b0:	e5843000 	str	r3, [r4]

    			/* Configure Interrupt Processor Targets Register (ICDIPTRn)
     			 * reg_offset = integer_div(N / 4) * 4
     			 * index = N mod 4 */
    			BIC		R4, R0, #3							// R4 = reg_offset
  b4:	e3c04003 	bic	r4, r0, #3
				LDR		R2, =MPCORE_GIC_DIST+ICDIPTR
  b8:	e59f2020 	ldr	r2, [pc, #32]	; e0 <HPS_WATCHDOG1_IRQ+0x14>
				ADD		R4, R2, R4							// R4 = word address of ICDIPTR
  bc:	e0824004 	add	r4, r2, r4
    			AND		R2, R0, #0x3						// N mod 4
  c0:	e2002003 	and	r2, r0, #3
				ADD		R4, R2, R4							// R4 = byte address in ICDIPTR
  c4:	e0824004 	add	r4, r2, r4

				/* now that we have the register address (R4) and value (R2), write to (only)
				 * the appropriate byte */
				STRB		R1, [R4]
  c8:	e5c41000 	strb	r1, [r4]
    
    			POP		{R4-R5, PC}
  cc:	e8bd8030 	pop	{r4, r5, pc}
  d0:	fffec100 	.word	0xfffec100
  d4:	0000ffff 	.word	0x0000ffff
  d8:	fffed000 	.word	0xfffed000
  dc:	fffed100 	.word	0xfffed100
  e0:	fffed800 	.word	0xfffed800

000000e4 <_start>:

.text        
.global     _start 
_start:                                     
/* Set up stack pointers for IRQ and SVC processor modes */
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
  e4:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
  e8:	e121f001 	msr	CPSR_c, r1
            LDR     SP, =A9_ONCHIP_END - 3  // set IRQ stack to top of A9 onchip memory
  ec:	e3e0d003 	mvn	sp, #3
/* Change to SVC (supervisor) mode with interrupts disabled */
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
  f0:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
  f4:	e129f001 	msr	CPSR_fc, r1
            LDR     SP, =DDR_END - 3        // set SVC stack to top of DDR3 memory
  f8:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

            BL      CONFIG_GIC              // configure the ARM generic interrupt controller
  fc:	ebffffcf 	bl	40 <CONFIG_GIC>

                                            // write to the pushbutton KEY interrupt mask register
            LDR     R0, =KEY_BASE           // pushbutton KEY base address
 100:	e59f0070 	ldr	r0, [pc, #112]	; 178 <SERVICE_FIQ+0x4>
            MOV     R1, #0xF               // set interrupt mask bits
 104:	e3a0100f 	mov	r1, #15
            STR     R1, [R0, #0x8]          // interrupt mask register is (base + 8)
 108:	e5801008 	str	r1, [r0, #8]

            MOV     R0, #0b01010011         // IRQ unmasked, MODE = SVC
 10c:	e3a00053 	mov	r0, #83	; 0x53
            MSR     CPSR_c, R0     
 110:	e121f000 	msr	CPSR_c, r0
                                            // enable IRQ interrupts in the processor

            LDR     R0, =MPCORE_PRIV_TIMER           // MPCORE_PRIV_TIMER base address
 114:	e59f0060 	ldr	r0, [pc, #96]	; 17c <SERVICE_FIQ+0x8>
            LDR     R1, =100000000              //    set load value (1nitialling value)
 118:	e59f1060 	ldr	r1, [pc, #96]	; 180 <ICDICER>
            STR     R1, [R0]          // load value register is (base)
 11c:	e5801000 	str	r1, [r0]

            MOV     R1, #0b111     //SET I,A,E to 1
 120:	e3a01007 	mov	r1, #7
            STR     R1, [R0, #8]    // I,A,E register is (base + 8)
 124:	e5801008 	str	r1, [r0, #8]

00000128 <IDLE>:
   

IDLE:                                       
            B       IDLE                    // main program simply idles
 128:	eafffffe 	b	128 <IDLE>

0000012c <SERVICE_UND>:

/* Define the exception service routines */

/*--- Undefined instructions --------------------------------------------------*/
SERVICE_UND:                                
            B       SERVICE_UND             
 12c:	eafffffe 	b	12c <SERVICE_UND>

00000130 <SERVICE_SVC>:

/*--- Software interrupts -----------------------------------------------------*/
SERVICE_SVC:                                
            B       SERVICE_SVC             
 130:	eafffffe 	b	130 <SERVICE_SVC>

00000134 <SERVICE_ABT_DATA>:

/*--- Aborted data reads ------------------------------------------------------*/
SERVICE_ABT_DATA:                           
            B       SERVICE_ABT_DATA        
 134:	eafffffe 	b	134 <SERVICE_ABT_DATA>

00000138 <SERVICE_ABT_INST>:

/*--- Aborted instruction fetch -----------------------------------------------*/
SERVICE_ABT_INST:                           
            B       SERVICE_ABT_INST        
 138:	eafffffe 	b	138 <SERVICE_ABT_INST>

0000013c <SERVICE_IRQ>:

/*--- IRQ ---------------------------------------------------------------------*/
SERVICE_IRQ:                                
            PUSH    {R0-R7, LR}             
 13c:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

/* Read the ICCIAR from the CPU interface */
            LDR     R4, =MPCORE_GIC_CPUIF   
 140:	e59f403c 	ldr	r4, [pc, #60]	; 184 <ICDICER+0x4>
            LDR     R5, [R4, #ICCIAR]       // read from ICCIAR
 144:	e594500c 	ldr	r5, [r4, #12]

00000148 <FPGA_IRQ1_HANDLER>:

FPGA_IRQ1_HANDLER:                          
            CMP     R5, #KEYS_IRQ           
 148:	e3550049 	cmp	r5, #73	; 0x49
            BLEQ     KEY_ISR
 14c:	0b00000d 	bleq	188 <KEY_ISR>
            CMP     R5, #KEYS_IRQ
 150:	e3550049 	cmp	r5, #73	; 0x49
            BEQ   EXIT_IRQ
 154:	0a000003 	beq	168 <EXIT_IRQ>

            CMP     R5, #MPCORE_PRIV_TIMER_IRQ
 158:	e355001d 	cmp	r5, #29
            BLEQ     TIMER_ISR
 15c:	0b000023 	bleq	1f0 <TIMER_ISR>
            BEQ   EXIT_IRQ
 160:	0a000000 	beq	168 <EXIT_IRQ>

00000164 <UNEXPECTED>:

UNEXPECTED: B     UNEXPECTED              // if not recognized, stop here
 164:	eafffffe 	b	164 <UNEXPECTED>

00000168 <EXIT_IRQ>:

EXIT_IRQ:                                   
/* Write to the End of Interrupt Register (ICCEOIR) */
            STR     R5, [R4, #ICCEOIR]      // write to ICCEOIR
 168:	e5845010 	str	r5, [r4, #16]

            POP     {R0-R7, LR}             
 16c:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
            SUBS    PC, LR, #4              
 170:	e25ef004 	subs	pc, lr, #4

00000174 <SERVICE_FIQ>:

/*--- FIQ ---------------------------------------------------------------------*/
SERVICE_FIQ:                                
            B       SERVICE_FIQ             
 174:	eafffffe 	b	174 <SERVICE_FIQ>
 178:	ff200050 	.word	0xff200050
 17c:	fffec600 	.word	0xfffec600
 180:	05f5e100 	.word	0x05f5e100
 184:	fffec100 	.word	0xfffec100

00000188 <KEY_ISR>:
 188:	e59f0054 	ldr	r0, [pc, #84]	; 1e4 <END_KEY_ISR+0x8>
 18c:	e590100c 	ldr	r1, [r0, #12]
 190:	e3a0200f 	mov	r2, #15
 194:	e580200c 	str	r2, [r0, #12]
 198:	e59f0048 	ldr	r0, [pc, #72]	; 1e8 <END_KEY_ISR+0xc>

0000019c <CHECK_KEY0>:
 19c:	e3a03001 	mov	r3, #1
 1a0:	e0133001 	ands	r3, r3, r1
 1a4:	0a000001 	beq	1b0 <CHECK_KEY1>
 1a8:	e3a02001 	mov	r2, #1
 1ac:	ea00000a 	b	1dc <END_KEY_ISR>

000001b0 <CHECK_KEY1>:
 1b0:	e3a03002 	mov	r3, #2
 1b4:	e0133001 	ands	r3, r3, r1
 1b8:	0a000001 	beq	1c4 <CHECK_KEY2>
 1bc:	e3a02002 	mov	r2, #2
 1c0:	ea000005 	b	1dc <END_KEY_ISR>

000001c4 <CHECK_KEY2>:
 1c4:	e3a03004 	mov	r3, #4
 1c8:	e0133001 	ands	r3, r3, r1
 1cc:	0a000001 	beq	1d8 <CHECK_KEY3>
 1d0:	e3a02004 	mov	r2, #4
 1d4:	ea000000 	b	1dc <END_KEY_ISR>

000001d8 <CHECK_KEY3>:
 1d8:	e3a02008 	mov	r2, #8

000001dc <END_KEY_ISR>:
 1dc:	e5802000 	str	r2, [r0]
 1e0:	e12fff1e 	bx	lr
 1e4:	ff200050 	.word	0xff200050
 1e8:	ff200000 	.word	0xff200000

000001ec <my_counter>:

my_counter: 	.word 0x0

TIMER_ISR:

     	LDR R0, =my_counter
 1ec:	00000000 	.word	0x00000000

000001f0 <TIMER_ISR>:
 1f0:	e59f0020 	ldr	r0, [pc, #32]	; 218 <__cs3_region_init_size_ram+0x20>
     	LDR R1, [R0]
 1f4:	e5901000 	ldr	r1, [r0]

     	ADD R1, R1, #1
 1f8:	e2811001 	add	r1, r1, #1

     	STR R1, [R0]
 1fc:	e5801000 	str	r1, [r0]

     	LDR R0, =LED_BASE
 200:	e59f0014 	ldr	r0, [pc, #20]	; 21c <__cs3_region_init_size_ram+0x24>
		STR R1, [R0]
 204:	e5801000 	str	r1, [r0]

        LDR R0, =MPCORE_PRIV_TIMER
 208:	e59f0010 	ldr	r0, [pc, #16]	; 220 <__cs3_region_init_size_ram+0x28>
     	MOV R1, #1
 20c:	e3a01001 	mov	r1, #1
     	STR R1, [R0, #12]
 210:	e580100c 	str	r1, [r0, #12]

     	BX      LR   
 214:	e12fff1e 	bx	lr
 218:	000001ec 	.word	0x000001ec
 21c:	ff200000 	.word	0xff200000
 220:	fffec600 	.word	0xfffec600
