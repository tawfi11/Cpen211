
C:/Users/User/Desktop/Lab9/lab9.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
.globl binary_search

 binary_search:
      SUB sp, sp, #24
   0:	e24dd018 	sub	sp, sp, #24
      STR lr, [sp, #20] //backup
   4:	e58de014 	str	lr, [sp, #20]
      STR r7, [sp, #16] //backup
   8:	e58d7010 	str	r7, [sp, #16]
      STR r6, [sp, #12] //backup
   c:	e58d600c 	str	r6, [sp, #12]
      STR r5, [sp, #8]  //backup
  10:	e58d5008 	str	r5, [sp, #8]
      STR r4, [sp, #4]  //backup
  14:	e58d4004 	str	r4, [sp, #4]

      SUB r5, r3, r2    // endIndex - startIndex
  18:	e0435002 	sub	r5, r3, r2
      MOV r5, r5, LSR #1      //Divide by 2
  1c:	e1a050a5 	lsr	r5, r5, #1
      ADD r4, r2, r5    // Middle Index
  20:	e0824005 	add	r4, r2, r5

      LDR r6, [sp, #24] // NumCalls
  24:	e59d6018 	ldr	r6, [sp, #24]
      ADD r6, r6, #1 // NUMcalls++
  28:	e2866001 	add	r6, r6, #1

      CMP r2,r3
  2c:	e1520003 	cmp	r2, r3
      BGT not_found // if(startIndex>endIndex)
  30:	ca000010 	bgt	78 <not_found>

      MOV r5, r4
  34:	e1a05004 	mov	r5, r4
      MOV r5, r5, LSL #2
  38:	e1a05105 	lsl	r5, r5, #2
      LDR r7,[r5,r0] // r7 holds Numbers[middleIndex]
  3c:	e7957000 	ldr	r7, [r5, r0]

      CMP r7, r1
  40:	e1570001 	cmp	r7, r1

      BLEQ found // if(Numbers[middleIndex] == key)
  44:	0b000014 	bleq	9c <found>

      BLGT L1 // if(Numbers[middleIndex] > key)
  48:	cb000016 	blgt	a8 <L1>

      BLLT L2 // if(Numbers[middleIndex] < key)
  4c:	bb000019 	bllt	b8 <L2>

      mvn r6, r6
  50:	e1e06006 	mvn	r6, r6
      add r6, r6, #1
  54:	e2866001 	add	r6, r6, #1
      STR r6, [r5,r1]
  58:	e7856001 	str	r6, [r5, r1]

      LDR lr, [sp, #20]  //restoring
  5c:	e59de014 	ldr	lr, [sp, #20]
      LDR r7, [sp, #16] //restoring
  60:	e59d7010 	ldr	r7, [sp, #16]
      LDR r6, [sp, #12] //restoring
  64:	e59d600c 	ldr	r6, [sp, #12]
      LDR r5, [sp, #8]  //restoring 
  68:	e59d5008 	ldr	r5, [sp, #8]
      LDR r4, [sp, #4]  
  6c:	e59d4004 	ldr	r4, [sp, #4]
      ADD sp, sp, #24
  70:	e28dd018 	add	sp, sp, #24
      MOV pc, lr
  74:	e1a0f00e 	mov	pc, lr

00000078 <not_found>:

not_found:
      
      MOV r1, r0
  78:	e1a01000 	mov	r1, r0
      MOV r0, #-1
  7c:	e3e00000 	mvn	r0, #0
      LDR lr, [sp, #20]
  80:	e59de014 	ldr	lr, [sp, #20]
      LDR r7, [sp, #16]
  84:	e59d7010 	ldr	r7, [sp, #16]
      LDR r6, [sp, #12]
  88:	e59d600c 	ldr	r6, [sp, #12]
      LDR r5, [sp, #8]
  8c:	e59d5008 	ldr	r5, [sp, #8]
      LDR r4, [sp, #4]
  90:	e59d4004 	ldr	r4, [sp, #4]
      ADD sp, sp, #24
  94:	e28dd018 	add	sp, sp, #24
      MOV pc, lr   
  98:	e1a0f00e 	mov	pc, lr

0000009c <found>:

      found:
//    MOV r5, r4
//    MOV r5, r5, LSL #2
//    STR r6, [r5]
      MOV r1, r0
  9c:	e1a01000 	mov	r1, r0
      MOV r0, r4
  a0:	e1a00004 	mov	r0, r4
      MOV pc, lr
  a4:	e1a0f00e 	mov	pc, lr

000000a8 <L1>:


L1:
      SUB r4, r4, #1
  a8:	e2444001 	sub	r4, r4, #1
      MOV r3, r4
  ac:	e1a03004 	mov	r3, r4
      STR r6, [sp, #0]
  b0:	e58d6000 	str	r6, [sp]
      B binary_search
  b4:	eaffffd1 	b	0 <__cs3_interrupt_vector>

000000b8 <L2>:

L2:
      ADD r4, r4 , #1
  b8:	e2844001 	add	r4, r4, #1
      MOV r2, r4
  bc:	e1a02004 	mov	r2, r4
      STR r6, [sp, #0]
  c0:	e58d6000 	str	r6, [sp]
      B binary_search
  c4:	eaffffcd 	b	0 <__cs3_interrupt_vector>

000000c8 <_start>:
.include "address_map_arm.s"
//.include "binary_search.s"
.text
.globl _start
_start:
      ldr r4,=SW_BASE
  c8:	e59f43c0 	ldr	r4, [pc, #960]	; 490 <numbers+0x190>
      ldr r5,=KEY_BASE 
  cc:	e59f53c0 	ldr	r5, [pc, #960]	; 494 <numbers+0x194>
      ldr r6,=LEDR_BASE
  d0:	e59f63c0 	ldr	r6, [pc, #960]	; 498 <numbers+0x198>

000000d4 <wait_key3>:

      // enter the value of "key" on SW0-SW9 here, then press KEY3
wait_key3:
      ldr r7,[r4]         // Read SW0-SW9 into R7
  d4:	e5947000 	ldr	r7, [r4]

      str r7,[r6]         // Show SW0-SW9 value on LEDR0-LEDR9
  d8:	e5867000 	str	r7, [r6]
      // triggers a ``Data Abort'' exception, which in turn 
      // causes the Cortex-A9 to set the PC to 0x00000010.  
      // Debug tip: Check you write -numData to the right 
      // address in memory.

      ldr r9,[r5]         // Read KEY0-KEY3 into R9 
  dc:	e5959000 	ldr	r9, [r5]

      ands r9,r9,#8       // Is KEY3 pressed?
  e0:	e2199008 	ands	r9, r9, #8
      // to indicate R9 is not zero.  
      //
      // If KEY3 is NOT pressed ands r9,r9,#8 sets Z flag to 1 
      // to indicate R9 is zero.

      beq wait_key3       // Branch if Z=1 (KEY3 was NOT pressed)
  e4:	0afffffa 	beq	d4 <wait_key3>

      // initialize numbers array by copying array "data" to "numbers"
      ldr r0, =data
  e8:	e59f03ac 	ldr	r0, [pc, #940]	; 49c <numbers+0x19c>
      ldr r1, =numbers
  ec:	e59f13ac 	ldr	r1, [pc, #940]	; 4a0 <numbers+0x1a0>
      mov r2,#100
  f0:	e3a02064 	mov	r2, #100	; 0x64
      add r2,r0, r2, LSL #2
  f4:	e0802102 	add	r2, r0, r2, lsl #2
      bl  init_numbers
  f8:	eb000017 	bl	15c <init_numbers>

      ldr r0, =numbers    // 1st argument in R0 = numbers
  fc:	e59f039c 	ldr	r0, [pc, #924]	; 4a0 <numbers+0x1a0>
      mov r1,r7           // 2nd argument in R1 = key
 100:	e1a01007 	mov	r1, r7
      mov r2,#0           // 3rd argument in R2 = startIndex
 104:	e3a02000 	mov	r2, #0
      mov r3,#99          // 4th argument in R3 = endIndex (start with small value to debug)
 108:	e3a03063 	mov	r3, #99	; 0x63
      mov r8,#0           // initial NumCalls value
 10c:	e3a08000 	mov	r8, #0
      str r8,[sp,#0]      // 5th argument saved to stack at offset zero (see Slide Set 9)
 110:	e58d8000 	str	r8, [sp]
      mov r4,#0xda          // putting garbage value in R4; DO NOT USE R4 to pass 5th argument! Use stack.
 114:	e3a040da 	mov	r4, #218	; 0xda
      mov r5,#0xdb          // putting garbage value in R5; DO NOT USE R5 to pass 5th argument! Use stack.
 118:	e3a050db 	mov	r5, #219	; 0xdb
      mov r6,#0xdc          // putting garbage value in R6; DO NOT USE R6 to pass 5th argument! Use stack. 
 11c:	e3a060dc 	mov	r6, #220	; 0xdc
      mov r7,#0xdc          // putting garbage value in R7; DO NOT USE R7 to pass 5th argument! Use stack. 
 120:	e3a070dc 	mov	r7, #220	; 0xdc
      mov r8,#0xdd          // putting garbage value in R8; DO NOT USE R8 to pass 5th argument! Use stack. 
 124:	e3a080dd 	mov	r8, #221	; 0xdd
      mov r9,#0xde          // putting garbage value in R9; DO NOT USE R9 to pass 5th argument! Use stack. 
 128:	e3a090de 	mov	r9, #222	; 0xde
      mov r10,#0xdf         // putting garbage value in R10; DO NOT USE R10 to pass 5th argument! Use stack. 
 12c:	e3a0a0df 	mov	r10, #223	; 0xdf
      mov r11,#0xef         // putting garbage value in R11; DO NOT USE R11 to pass 5th argument! Use stack. 
 130:	e3a0b0ef 	mov	r11, #239	; 0xef
      mov r12,#0xff         // putting garbage value in R12; DO NOT USE R12 to pass 5th argument! Use stack. 
 134:	e3a0c0ff 	mov	r12, #255	; 0xff
      bl  binary_search   // call binary_search    
 138:	ebffffb0 	bl	0 <__cs3_interrupt_vector>

      // setting r4, r5, r6 back to non-garbage values
      ldr r4,=SW_BASE
 13c:	e59f434c 	ldr	r4, [pc, #844]	; 490 <numbers+0x190>
      ldr r5,=KEY_BASE 
 140:	e59f534c 	ldr	r5, [pc, #844]	; 494 <numbers+0x194>
      ldr r6,=LEDR_BASE
 144:	e59f634c 	ldr	r6, [pc, #844]	; 498 <numbers+0x198>

      str r0,[r6]         // display result on LEDR0-LEDR9 (check your result!)
 148:	e5860000 	str	r0, [r6]

0000014c <wait_key0>:
      // format" then "Decimal".  Repeat and in the last step select "Signed 
      // representation".  If endIndex was 99, you should see something like 
      // Figure 6 in the Lab 9 handout.

wait_key0:                
      ldr  r1,[r5]        // read KEY0-KEY3
 14c:	e5951000 	ldr	r1, [r5]
      ands r1,r1,#1       // check if KEY0 pressed
 150:	e2111001 	ands	r1, r1, #1
      beq  wait_key0      // wait for KEY0 to be pressed
 154:	0afffffc 	beq	14c <wait_key0>

      b wait_key3         // go back and try another search
 158:	eaffffdd 	b	d4 <wait_key3>

0000015c <init_numbers>:

// "init_numbers" copies array pointed at by r0 into array pointed at by r1
// The following code is NOT recursive.  It contains a loop.
init_numbers:
      ldr r3, [r0], #4
 15c:	e4903004 	ldr	r3, [r0], #4
      str r3, [r1], #4
 160:	e4813004 	str	r3, [r1], #4
      cmp r0, r2
 164:	e1500002 	cmp	r0, r2
      blt init_numbers
 168:	bafffffb 	blt	15c <init_numbers>
      mov pc, lr
 16c:	e1a0f00e 	mov	pc, lr

00000170 <data>:
 170:	0000001c 	.word	0x0000001c
 174:	00000025 	.word	0x00000025
 178:	0000002c 	.word	0x0000002c
 17c:	0000003c 	.word	0x0000003c
 180:	00000055 	.word	0x00000055
 184:	00000063 	.word	0x00000063
 188:	00000079 	.word	0x00000079
 18c:	0000007f 	.word	0x0000007f
 190:	00000081 	.word	0x00000081
 194:	0000008a 	.word	0x0000008a
 198:	0000008f 	.word	0x0000008f
 19c:	0000009b 	.word	0x0000009b
 1a0:	000000a2 	.word	0x000000a2
 1a4:	000000a4 	.word	0x000000a4
 1a8:	000000af 	.word	0x000000af
 1ac:	000000b3 	.word	0x000000b3
 1b0:	000000cd 	.word	0x000000cd
 1b4:	000000d4 	.word	0x000000d4
 1b8:	000000d9 	.word	0x000000d9
 1bc:	000000e7 	.word	0x000000e7
 1c0:	000000eb 	.word	0x000000eb
 1c4:	000000ee 	.word	0x000000ee
 1c8:	000000f2 	.word	0x000000f2
 1cc:	000000f8 	.word	0x000000f8
 1d0:	000000fa 	.word	0x000000fa
 1d4:	00000102 	.word	0x00000102
 1d8:	0000011b 	.word	0x0000011b
 1dc:	0000011e 	.word	0x0000011e
 1e0:	00000131 	.word	0x00000131
 1e4:	00000137 	.word	0x00000137
 1e8:	0000013c 	.word	0x0000013c
 1ec:	00000142 	.word	0x00000142
 1f0:	00000146 	.word	0x00000146
 1f4:	0000015f 	.word	0x0000015f
 1f8:	00000163 	.word	0x00000163
 1fc:	0000016c 	.word	0x0000016c
 200:	0000016e 	.word	0x0000016e
 204:	00000178 	.word	0x00000178
 208:	00000187 	.word	0x00000187
 20c:	0000018e 	.word	0x0000018e
 210:	00000198 	.word	0x00000198
 214:	0000019a 	.word	0x0000019a
 218:	0000019f 	.word	0x0000019f
 21c:	000001a2 	.word	0x000001a2
 220:	000001a9 	.word	0x000001a9
 224:	000001b5 	.word	0x000001b5
 228:	000001b9 	.word	0x000001b9
 22c:	000001c4 	.word	0x000001c4
 230:	000001da 	.word	0x000001da
 234:	000001e8 	.word	0x000001e8
 238:	000001fa 	.word	0x000001fa
 23c:	000001fb 	.word	0x000001fb
 240:	0000020e 	.word	0x0000020e
 244:	00000214 	.word	0x00000214
 248:	00000216 	.word	0x00000216
 24c:	00000223 	.word	0x00000223
 250:	00000224 	.word	0x00000224
 254:	00000247 	.word	0x00000247
 258:	00000249 	.word	0x00000249
 25c:	00000253 	.word	0x00000253
 260:	0000025b 	.word	0x0000025b
 264:	0000026d 	.word	0x0000026d
 268:	00000280 	.word	0x00000280
 26c:	00000295 	.word	0x00000295
 270:	0000029a 	.word	0x0000029a
 274:	000002b2 	.word	0x000002b2
 278:	000002b4 	.word	0x000002b4
 27c:	000002c9 	.word	0x000002c9
 280:	000002cf 	.word	0x000002cf
 284:	000002ee 	.word	0x000002ee
 288:	000002f3 	.word	0x000002f3
 28c:	00000300 	.word	0x00000300
 290:	00000307 	.word	0x00000307
 294:	00000308 	.word	0x00000308
 298:	00000310 	.word	0x00000310
 29c:	00000311 	.word	0x00000311
 2a0:	00000317 	.word	0x00000317
 2a4:	0000031d 	.word	0x0000031d
 2a8:	0000031e 	.word	0x0000031e
 2ac:	00000324 	.word	0x00000324
 2b0:	0000033c 	.word	0x0000033c
 2b4:	0000034a 	.word	0x0000034a
 2b8:	0000034e 	.word	0x0000034e
 2bc:	0000035a 	.word	0x0000035a
 2c0:	00000374 	.word	0x00000374
 2c4:	00000377 	.word	0x00000377
 2c8:	0000037a 	.word	0x0000037a
 2cc:	0000037d 	.word	0x0000037d
 2d0:	0000038c 	.word	0x0000038c
 2d4:	000003a8 	.word	0x000003a8
 2d8:	000003ab 	.word	0x000003ab
 2dc:	000003b9 	.word	0x000003b9
 2e0:	000003c0 	.word	0x000003c0
 2e4:	000003ca 	.word	0x000003ca
 2e8:	000003d2 	.word	0x000003d2
 2ec:	000003d3 	.word	0x000003d3
 2f0:	000003d5 	.word	0x000003d5
 2f4:	000003de 	.word	0x000003de
 2f8:	000003ea 	.word	0x000003ea
 2fc:	000003ef 	.word	0x000003ef

00000300 <numbers>:
 300:	deadbeef 	.word	0xdeadbeef
 304:	deadbeef 	.word	0xdeadbeef
 308:	deadbeef 	.word	0xdeadbeef
 30c:	deadbeef 	.word	0xdeadbeef
 310:	deadbeef 	.word	0xdeadbeef
 314:	deadbeef 	.word	0xdeadbeef
 318:	deadbeef 	.word	0xdeadbeef
 31c:	deadbeef 	.word	0xdeadbeef
 320:	deadbeef 	.word	0xdeadbeef
 324:	deadbeef 	.word	0xdeadbeef
 328:	deadbeef 	.word	0xdeadbeef
 32c:	deadbeef 	.word	0xdeadbeef
 330:	deadbeef 	.word	0xdeadbeef
 334:	deadbeef 	.word	0xdeadbeef
 338:	deadbeef 	.word	0xdeadbeef
 33c:	deadbeef 	.word	0xdeadbeef
 340:	deadbeef 	.word	0xdeadbeef
 344:	deadbeef 	.word	0xdeadbeef
 348:	deadbeef 	.word	0xdeadbeef
 34c:	deadbeef 	.word	0xdeadbeef
 350:	deadbeef 	.word	0xdeadbeef
 354:	deadbeef 	.word	0xdeadbeef
 358:	deadbeef 	.word	0xdeadbeef
 35c:	deadbeef 	.word	0xdeadbeef
 360:	deadbeef 	.word	0xdeadbeef
 364:	deadbeef 	.word	0xdeadbeef
 368:	deadbeef 	.word	0xdeadbeef
 36c:	deadbeef 	.word	0xdeadbeef
 370:	deadbeef 	.word	0xdeadbeef
 374:	deadbeef 	.word	0xdeadbeef
 378:	deadbeef 	.word	0xdeadbeef
 37c:	deadbeef 	.word	0xdeadbeef
 380:	deadbeef 	.word	0xdeadbeef
 384:	deadbeef 	.word	0xdeadbeef
 388:	deadbeef 	.word	0xdeadbeef
 38c:	deadbeef 	.word	0xdeadbeef
 390:	deadbeef 	.word	0xdeadbeef
 394:	deadbeef 	.word	0xdeadbeef
 398:	deadbeef 	.word	0xdeadbeef
 39c:	deadbeef 	.word	0xdeadbeef
 3a0:	deadbeef 	.word	0xdeadbeef
 3a4:	deadbeef 	.word	0xdeadbeef
 3a8:	deadbeef 	.word	0xdeadbeef
 3ac:	deadbeef 	.word	0xdeadbeef
 3b0:	deadbeef 	.word	0xdeadbeef
 3b4:	deadbeef 	.word	0xdeadbeef
 3b8:	deadbeef 	.word	0xdeadbeef
 3bc:	deadbeef 	.word	0xdeadbeef
 3c0:	deadbeef 	.word	0xdeadbeef
 3c4:	deadbeef 	.word	0xdeadbeef
 3c8:	deadbeef 	.word	0xdeadbeef
 3cc:	deadbeef 	.word	0xdeadbeef
 3d0:	deadbeef 	.word	0xdeadbeef
 3d4:	deadbeef 	.word	0xdeadbeef
 3d8:	deadbeef 	.word	0xdeadbeef
 3dc:	deadbeef 	.word	0xdeadbeef
 3e0:	deadbeef 	.word	0xdeadbeef
 3e4:	deadbeef 	.word	0xdeadbeef
 3e8:	deadbeef 	.word	0xdeadbeef
 3ec:	deadbeef 	.word	0xdeadbeef
 3f0:	deadbeef 	.word	0xdeadbeef
 3f4:	deadbeef 	.word	0xdeadbeef
 3f8:	deadbeef 	.word	0xdeadbeef
 3fc:	deadbeef 	.word	0xdeadbeef
 400:	deadbeef 	.word	0xdeadbeef
 404:	deadbeef 	.word	0xdeadbeef
 408:	deadbeef 	.word	0xdeadbeef
 40c:	deadbeef 	.word	0xdeadbeef
 410:	deadbeef 	.word	0xdeadbeef
 414:	deadbeef 	.word	0xdeadbeef
 418:	deadbeef 	.word	0xdeadbeef
 41c:	deadbeef 	.word	0xdeadbeef
 420:	deadbeef 	.word	0xdeadbeef
 424:	deadbeef 	.word	0xdeadbeef
 428:	deadbeef 	.word	0xdeadbeef
 42c:	deadbeef 	.word	0xdeadbeef
 430:	deadbeef 	.word	0xdeadbeef
 434:	deadbeef 	.word	0xdeadbeef
 438:	deadbeef 	.word	0xdeadbeef
 43c:	deadbeef 	.word	0xdeadbeef
 440:	deadbeef 	.word	0xdeadbeef
 444:	deadbeef 	.word	0xdeadbeef
 448:	deadbeef 	.word	0xdeadbeef
 44c:	deadbeef 	.word	0xdeadbeef
 450:	deadbeef 	.word	0xdeadbeef
 454:	deadbeef 	.word	0xdeadbeef
 458:	deadbeef 	.word	0xdeadbeef
 45c:	deadbeef 	.word	0xdeadbeef
 460:	deadbeef 	.word	0xdeadbeef
 464:	deadbeef 	.word	0xdeadbeef
 468:	deadbeef 	.word	0xdeadbeef
 46c:	deadbeef 	.word	0xdeadbeef
 470:	deadbeef 	.word	0xdeadbeef
 474:	deadbeef 	.word	0xdeadbeef
 478:	deadbeef 	.word	0xdeadbeef
 47c:	deadbeef 	.word	0xdeadbeef
 480:	deadbeef 	.word	0xdeadbeef
 484:	deadbeef 	.word	0xdeadbeef
 488:	deadbeef 	.word	0xdeadbeef
 48c:	deadbeef 	.word	0xdeadbeef
 490:	ff200040 	.word	0xff200040
 494:	ff200050 	.word	0xff200050
 498:	ff200000 	.word	0xff200000
 49c:	00000170 	.word	0x00000170
 4a0:	00000300 	.word	0x00000300
